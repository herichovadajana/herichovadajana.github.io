I"A<p>This time Iâ€™m trying to understand protocols. To be honest, Iâ€™ve never heard about protocols till today, butÂ I wanted this knowlege, so I studied, and hereâ€™s the result ðŸ˜Š</p>

<h2 id="why-do-we-need-multimethods-and-protocols">Why do we need Multimethods and Protocols?</h2>

<p>In Clojure, and in functional languages in general, there are multiple ways to adapt functions to various types (in our case it will be animals). If we need to adapt function to various types, we usually use conditions (if, cond..), and if we want to add new behavior for another type, we need to touch part of code where types are distinguished.</p>

<p>I have a function</p>

<script src="https://gist.github.com/herichovadajana/46947964f83e15e6a270.js"></script>

<p>Results</p>

<script src="https://gist.github.com/herichovadajana/8917852c3dcf472e88fb.js"></script>

<script src="https://gist.github.com/herichovadajana/1dc7aac1f416e9d342f3.js"></script>

<p>and I decided to find out something about Pumpkin and adopt him</p>

<script src="https://gist.github.com/herichovadajana/5cd35c3b34f1b0cb1014.js"></script>

<p>I need to add a map for pumpkin, into map of animals and an â€˜animal languageâ€™ into tell-me-about-animal function (this animal sound is located in this function because all cats have the same language, so it doesnâ€™t make sense to write it with every new cat, or dog .. )</p>

<script src="https://gist.github.com/herichovadajana/4bcda1e07eff41a1e9a2.js"></script>

<p>Result</p>

<script src="https://gist.github.com/d452da45dcae3f71a732.js"></script>

<h1 id="multimethods">Multimethods</h1>

<p>In this case, using multimethods makes our code more extensible, because when adding new animal type, we donâ€™t need to touch the <mark style="background-color: #ddead1">tell-me-about-animal</mark> core function, which could be for example located in a library, as such it would be difficult/impossible to modify it. To add a new animal type, we just need to add a new case to our multimethod (defmethod).</p>

<script src="https://gist.github.com/herichovadajana/a8a1aab71011a91a7f32.js"></script>

<p>Results</p>

<script src="https://gist.github.com/herichovadajana/3ab30420559b9dec711c.js"></script>

<script src="https://gist.github.com/herichovadajana/342bb6c1a4f9637e41f3.js"></script>

<p>defmulti creates a new multimethod with dispatch function. In our case we create multimethod with name animal-sound and dispatch function in this multimethod selects keyword :species from argument.</p>

<script src="https://gist.github.com/a4d41601172b0c7b4c0c.js"></script>

<p>defmethod creates and installs new method for mutimethod associated with dispatch value. defmethod animal-sound creates new method for (defmulti animal-sound (fn [my-animal] (:species my-animal)) .</p>

<p>We created three methods:</p>

<p>first method</p>

<script src="https://gist.github.com/herichovadajana/43297e0e6b72898e9d98.js"></script>

<p>is called when returned value from defmulti animal-sound dispatching function is :cat</p>

<p>second method</p>

<script src="https://gist.github.com/herichovadajana/6d9719e15ffedf7f2cbf.js"><script>

is called if when returned value does not match any of the others methods. 

example 

if we call (animal-sound {:name "Twiggi" :species :dog :home "house" :age 3}) the dispatch function returns value under keyword :species , which is :dog , and the appropriate method is used. Which means returned value will be "Woof"

if we call <span style="background-color:#f2f2f2;"> (animal-sound {:name "Twiggi" :species :dog :home "house" :age 3}) </span> the dispatch function returns value under keyword <span style="background-color:#f2f2f2;"> :species </span>, which is <span style="background-color:#f2f2f2;"> :dog </span>, and the appropriate method is used. Which means returned value will be <span style="background-color:#f2f2f2;"> "Woof" </span>
</script>
:ET